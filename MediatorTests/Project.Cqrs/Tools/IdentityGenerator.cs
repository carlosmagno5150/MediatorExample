using System;
using System.Text;

namespace Project.Cqrs.Tools
{
    public static class IdentityGenerator
    {
        public static string NewSequentialIdentity()
        {
            return NewSequentialGuid().ToString("N");
        }

        public static string DefaultApplicationKey()
        {
            return Guid.Empty.ToString("N");
        }

        public static Guid NewSequentialGuid()
        {
            byte[] uid = Guid.NewGuid().ToByteArray();
            byte[] binDate = BitConverter.GetBytes(DateTime.UtcNow.Ticks);

            byte[] secuentialGuid = new byte[uid.Length];

            secuentialGuid[0] = uid[0];
            secuentialGuid[1] = uid[1];
            secuentialGuid[2] = uid[2];
            secuentialGuid[3] = uid[3];
            secuentialGuid[4] = uid[4];
            secuentialGuid[5] = uid[5];
            secuentialGuid[6] = uid[6];
            // set the first part of the 8th byte to '1100' so     
            // later we'll be able to validate it was generated by us   

            secuentialGuid[7] = (byte)(0xc0 | (0xf & uid[7]));

            // the last 8 bytes are sequential,    
            // it minimizes index fragmentation   
            // to a degree as long as there are not a large    
            // number of Secuential-Guids generated per millisecond  

            secuentialGuid[9] = binDate[0];
            secuentialGuid[8] = binDate[1];
            secuentialGuid[15] = binDate[2];
            secuentialGuid[14] = binDate[3];
            secuentialGuid[13] = binDate[4];
            secuentialGuid[12] = binDate[5];
            secuentialGuid[11] = binDate[6];
            secuentialGuid[10] = binDate[7];

            return new Guid(secuentialGuid);
        }

        public static Int64 GetInt64HashCode(string key)
        {
            Int64 hashCode = 0;
            if (!string.IsNullOrEmpty(key))
            {
                byte[] byteContents = Encoding.Unicode.GetBytes(key);
                System.Security.Cryptography.SHA256 hash =
                    new System.Security.Cryptography.SHA256CryptoServiceProvider();
                byte[] hashText = hash.ComputeHash(byteContents);

                var hashCodeStart = BitConverter.ToInt64(hashText, 0);
                var hashCodeMedium = BitConverter.ToInt64(hashText, 8);
                var hashCodeEnd = BitConverter.ToInt64(hashText, 24);
                hashCode = hashCodeStart ^ hashCodeMedium ^ hashCodeEnd;
            }
            return (hashCode);
        }

        public static Int64 GetAbsoluteInt64HashCode(string key)
        {
            var hash = GetInt64HashCode(key) & long.MaxValue;
            return hash == 0 ? 42 : hash;

        }
    }

}